// Global invocation must be at uvec3(color texture size, object count)
// Local invocation must be at uvec3(max instance count, 1, 1)
#version 460
#extension GL_KHR_vulkan_glsl: enable
#extension GL_EXT_nonuniform_qualifier: enable
#extension GL_EXT_debug_printf : enable
//#extension GL_ARB_shader_group_vote : enable
#define MAX_INSTANCE_COUNT 2
#define TRI_COUNT_PER_THREAD 64
#define TRI_COUNT_LEN 4
layout(local_size_x = MAX_INSTANCE_COUNT, local_size_y = TRI_COUNT_LEN, local_size_z = TRI_COUNT_LEN) in;

layout(set = 0, binding = 0, rgba8_snorm) uniform writeonly image2D colorTexture;
layout(std140, set = 1, binding = 0) readonly buffer camTransform{
    mat4 worldToView;
    mat4 viewToProj;
    mat4 viewToWorld;
    // 0: pos-FOVDegrees
    vec4 pos;
    vec4 dir;
} cam;

layout(std140, set = 2, binding = 0) readonly buffer worldTransforms{
    mat4 world[];
} transforms[];

struct indirectDrawCallBuffer{
  uint indxCountPerInstance;
  uint instanceCount;
  uint firstIndx;
  uint vertexOffset;
  uint firstInstance;
};
layout(std430, set = 3, binding = 0) readonly buffer indirectCallBuffers{
  indirectDrawCallBuffer calls[];
} callBufferSet;

layout(std430, set = 4, binding = 0) readonly buffer vertexBuffers{
  float data[];
} VBs[];

layout(std430, set = 5, binding = 0) readonly buffer indexBuffers{
  uint data[];
} IBs[];


vec3 multDirMat(mat4 m, vec3 dir){
  vec3 newDir;
        
        newDir.x = dir[0] * m[0][0] + dir[1] * m[1][0] + dir[2] * m[2][0];
        newDir.y = dir[0] * m[0][1] + dir[1] * m[1][1] + dir[2] * m[2][1];
        newDir.z = dir[0] * m[0][2] + dir[1] * m[1][2] + dir[2] * m[2][2];
        
        return newDir;
}
uint vertexStride = (3 + 3 + 2);
vec3 getVPos(uint oIndx, uint vIndx){
  vIndx = vertexStride * vIndx;
  return vec3(VBs[oIndx].data[vIndx], VBs[oIndx].data[vIndx + 1], VBs[oIndx].data[vIndx + 2]);
}

vec3 getVNormal(uint oIndx, uint vIndx){
  vIndx = (vertexStride * vIndx) + 3;
  return vec3(VBs[oIndx].data[vIndx], VBs[oIndx].data[vIndx + 1], VBs[oIndx].data[vIndx + 2]);
}

vec3 getRayDirection(){
  vec3 camPos = cam.pos.xyz;
  float camFOV = cam.pos.w;
  vec2 res = imageSize(colorTexture);
  vec2 pixel = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
  float imageAspectRatio = res.x / res.y; // assuming width > height

  #if 1
  float Px = (2 * ((pixel.x + 0.5) / res.x) - 1) * tan(radians(camFOV) / 2.0f) * imageAspectRatio;
  float Py = 1 - 2 * ((pixel.y + 0.5) / res.y) * tan(radians(camFOV) / 2.0f);
  vec3 pixelWS = (cam.viewToWorld * vec4(Px, Py, -1.0f, 1.0f)).xyz;
  //debugPrintfEXT("Ray is %f %f %f\n", pixelWS.x, pixelWS.y, pixelWS.z);
  vec3 rayDirection = pixelWS - camPos;

  #else
  
 float cameraFOV = tan(radians(camFOV) / 2.0f);
 vec3 direction = vec3((2.0 * (pixel.x + 0.5 / res.x) - 1) * cameraFOV * imageAspectRatio, (2.0f * (pixel.y + 0.5 / res.y) - 1.0f) * cameraFOV, -1.0);
 direction.y = -direction.y;
 vec3 rayDirection = (cam.viewToWorld * vec4(direction, 0.0f)).xyz;
 //vec3 rayDirection = direction;


 #endif

  return normalize(rayDirection);
}
// Triangle intersection. Returns { t, u, v }
vec3 triIntersect( in vec3 ro, in vec3 rd, in vec3 v0, in vec3 v1, in vec3 v2 )
{
    vec3 v1v0 = v1 - v0;
    vec3 v2v0 = v2 - v0;
    vec3 rov0 = ro - v0;

#if 1
    // Cramer's rule for solcing p(t) = ro+t·rd = p(u,v) = vo + u·(v1-v0) + v·(v2-v1)
    float d = 1.0/determinant(mat3(v1v0, v2v0, -rd ));
    float u =   d*determinant(mat3(rov0, v2v0, -rd ));
    float v =   d*determinant(mat3(v1v0, rov0, -rd ));
    float t =   d*determinant(mat3(v1v0, v2v0, rov0));
#else
    // The four determinants above have lots of terms in common. Knowing the changing
    // the order of the columns/rows doesn't change the volume/determinant, and that
    // the volume is dot(cross(a,b,c)), we can precompute some common terms and reduce
    // it all to:
    vec3  n = cross( v1v0, v2v0 );
    vec3  q = cross( rov0, rd );
    float d = 1.0/dot( rd, n );
    float u = d*dot( -q, v2v0 );
    float v = d*dot(  q, v1v0 );
    float t = d*dot( -n, rov0 );
#endif    

    if( u<0.0 || v<0.0 || (u+v)>1.0 ) t = -1.0;
    
    return vec3( t, u, v );
}
//float triScale = 1.0f;
//vec3 basicTriangle[3] = {vec3(-0.5f, -0.5f, 0.0f) * triScale, vec3(0.5f, -0.5f, 0.0f)* triScale, vec3(0.0f, 0.5f, 0.0f) * triScale};

shared uint isRayFound;
shared vec3 results[MAX_INSTANCE_COUNT * TRI_COUNT_LEN * TRI_COUNT_LEN];
void main()
{
  vec2 res = imageSize(colorTexture);
  uint colorIndx = 0;
  if(gl_GlobalInvocationID.x > res.x / 2){
    colorIndx = 1;
  }
  if(gl_GlobalInvocationID.y > res.y / 2){
    colorIndx += 2;
  }
  /*
  uint instIndx = gl_LocalInvocationID.x;
  uint objIndx = gl_GlobalInvocationID.z;
  coherent ivec2 pixel = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
  if(instIndx >= callBufferSet.calls[objIndx].instanceCount){return;}
  mat4 worldMatrix = transforms[objIndx].world[instIndx];
  coherent vec3 rayDir = getRayDirection();
  
  if(gl_LocalInvocationIndex == 0){
    for(uint i = 0; i < MAX_INSTANCE_COUNT * TRI_COUNT_LEN * TRI_COUNT_LEN; i++){
      results[i] = vec3(0.0f);
    }
    isRayFound = 0;
  }
  for(uint localTriIndx = 0; localTriIndx < TRI_COUNT_PER_THREAD; localTriIndx++){
    uint triIndx = (gl_LocalInvocationID.x * TRI_COUNT_LEN) + (gl_LocalInvocationID.y * TRI_COUNT_LEN)+ localTriIndx;
    if(triIndx * 3 >= callBufferSet.calls[objIndx].indxCountPerInstance){
      break;
    }
    uint vIndices[3] = {
      IBs[objIndx].data[triIndx * 3],
      IBs[objIndx].data[(triIndx * 3) + 1],
      IBs[objIndx].data[(triIndx * 3) + 2]};
    vec3 v[3];
    for(uint vIndx = 0; vIndx < 3; vIndx++){
      v[vIndx] = (worldMatrix * vec4(getVPos(objIndx, vIndices[vIndx]), 0.0f)).xyz;
    }
    vec3 hit = triIntersect(cam.pos.xyz, rayDir, v[0], v[1], v[2]);
    if(!( hit.y<0.0 || hit.y>1.0 || hit.z<0.0 || (hit.y+hit.z)>1.0 ) && hit.x > 0.001){
      results[gl_LocalInvocationIndex] = hit;
      atomicAdd(isRayFound, 1);
      break;
    }
  }
  memoryBarrierShared();
  barrier();
  if(gl_LocalInvocationIndex == 0 && atomicMax(isRayFound, 0) > 0){
    for(uint i = 0; i < MAX_INSTANCE_COUNT * TRI_COUNT_LEN * TRI_COUNT_LEN; i++){
      if(results[i].x > 0.001){
        imageStore(colorTexture, pixel, vec4(1.0f));
        break;
      }
    }
  }*/
}
